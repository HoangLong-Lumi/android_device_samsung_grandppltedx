diff --git a/init/init.cpp b/init/init.cpp
index 7a370596e..841048f67 100755
--- a/init/init.cpp
+++ b/init/init.cpp
@@ -85,7 +85,9 @@ int have_console;
 std::string console_name = "/dev/console";
 static time_t process_needs_restart;
 
-const char *ENV[32];
+// xen0n: some MTK services (e.g. ril-daemon-mtk) require very large number
+// of sockets, which can't be contained in 32 entries minus other variables.
+const char *ENV[64];
 
 bool waiting_for_exec = false;
 
@@ -440,6 +442,7 @@ static void selinux_init_all_handles(void)
     sehandle_prop = selinux_android_prop_context_handle();
 }
 
+#if 0
 enum selinux_enforcing_status { SELINUX_PERMISSIVE, SELINUX_ENFORCING };
 
 static selinux_enforcing_status selinux_status_from_cmdline() {
@@ -453,11 +456,12 @@ static selinux_enforcing_status selinux_status_from_cmdline() {
 
     return status;
 }
+#endif
 
 static bool selinux_is_enforcing(void)
 {
     if (ALLOW_PERMISSIVE_SELINUX) {
-        return selinux_status_from_cmdline() == SELINUX_ENFORCING;
+        return false; // selinux_status_from_cmdline() == SELINUX_ENFORCING;
     }
     return true;
 }
diff --git a/init/init.h b/init/init.h
index 345d442c0..f93d0c5ba 100644
--- a/init/init.h
+++ b/init/init.h
@@ -24,7 +24,7 @@ class Service;
 
 #define COMMAND_RETRY_TIMEOUT 5
 
-extern const char *ENV[32];
+extern const char *ENV[64];
 extern bool waiting_for_exec;
 extern int have_console;
 extern std::string console_name;
diff --git a/init/service.cpp b/init/service.cpp
index a5334f447..560c12260 100644
--- a/init/service.cpp
+++ b/init/service.cpp
@@ -371,6 +371,7 @@ bool Service::Start() {
             scon = ret_scon;
             free(ret_scon);
         }
+#if 0
         if (rc == 0 && scon == mycon) {
             ERROR("Service %s does not have a SELinux domain defined.\n", name_.c_str());
             if (selinux_status_getenforce() > 0) {
@@ -379,6 +380,7 @@ bool Service::Start() {
                 return false;
             }
         }
+#endif
         free(mycon);
         free(fcon);
         if (rc < 0) {
diff --git a/libcutils/fs_config.c b/libcutils/fs_config.c
index 68cfcbe00..49879b694 100644
--- a/libcutils/fs_config.c
+++ b/libcutils/fs_config.c
@@ -143,7 +143,8 @@ static const struct fs_path_config android_files[] = {
     { 00700, AID_SYSTEM,    AID_SHELL,     CAP_MASK_LONG(CAP_BLOCK_SUSPEND), "system/bin/inputflinger" },
 
     /* Support FIFO scheduling mode in SurfaceFlinger. */
-    { 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
+    /* Disabled for now as this caused LD_PRELOAD and LD_SHIM_LIBS to be sanitized in linker */
+    // { 00755, AID_SYSTEM,    AID_GRAPHICS,     CAP_MASK_LONG(CAP_SYS_NICE), "system/bin/surfaceflinger" },
 
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/uncrypt" },
     { 00750, AID_ROOT,      AID_ROOT,      0, "system/bin/install-recovery.sh" },
diff --git a/rootdir/init.usb.rc b/rootdir/init.usb.rc
index 915d159a5..0666e4d63 100644
--- a/rootdir/init.usb.rc
+++ b/rootdir/init.usb.rc
@@ -15,7 +15,7 @@ on post-fs-data
 service adbd /sbin/adbd --root_seclabel=u:r:su:s0
     class core
     socket adbd stream 660 system system
-    disabled
+    #disabled
     seclabel u:r:adbd:s0
 
 # adbd on at boot in emulator
